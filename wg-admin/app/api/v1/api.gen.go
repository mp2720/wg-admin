// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for PostAddressesVersionParamsVersion.
const (
	V4 PostAddressesVersionParamsVersion = "v4"
	V6 PostAddressesVersionParamsVersion = "v6"
)

// Address defines model for Address.
type Address struct {
	Address     *string `json:"address,omitempty"`
	Description *string `json:"description,omitempty"`
	Links       *struct {
		UserOwner *string `json:"user_owner,omitempty"`
	} `json:"links,omitempty"`
}

// AllocateAddressRequst defines model for AllocateAddressRequst.
type AllocateAddressRequst struct {
	Description *string `json:"description,omitempty"`
}

// AuthToken defines model for AuthToken.
type AuthToken struct {
	Token string `json:"token"`
}

// RegisterUserRequest defines model for RegisterUserRequest.
type RegisterUserRequest struct {
	Fare         string  `json:"fare"`
	IsAdmin      bool    `json:"is_admin"`
	MaxAddresses int     `json:"max_addresses"`
	Name         string  `json:"name"`
	PrivateKey   *string `json:"private_key,omitempty"`
}

// UpdateAddressRequest defines model for UpdateAddressRequest.
type UpdateAddressRequest struct {
	Description string `json:"description"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	Fare         *string `json:"fare,omitempty"`
	IsAdmin      *bool   `json:"is_admin,omitempty"`
	IsBanned     *bool   `json:"is_banned,omitempty"`
	MaxAddresses *int    `json:"max_addresses,omitempty"`
	Name         *string `json:"name,omitempty"`
	PrivateKey   *string `json:"private_key,omitempty"`
}

// User defines model for User.
type User struct {
	AddressCount int    `json:"address_count"`
	Fare         string `json:"fare"`
	IsAdmin      bool   `json:"is_admin"`
	IsBanned     bool   `json:"is_banned"`
	LastSeenAt   int    `json:"last_seen_at"`
	Links        *struct {
		Addresses *string `json:"addresses,omitempty"`
	} `json:"links,omitempty"`
	MaxAddresses int     `json:"max_addresses"`
	Name         string  `json:"name"`
	PaidByTime   *string `json:"paid_by_time,omitempty"`
	PublicKey    string  `json:"public_key"`
	Uuid         string  `json:"uuid"`
}

// PostAddressesVersionParamsVersion defines parameters for PostAddressesVersion.
type PostAddressesVersionParamsVersion string

// PutAddressesAddressJSONRequestBody defines body for PutAddressesAddress for application/json ContentType.
type PutAddressesAddressJSONRequestBody = UpdateAddressRequest

// PostAddressesVersionJSONRequestBody defines body for PostAddressesVersion for application/json ContentType.
type PostAddressesVersionJSONRequestBody = AllocateAddressRequst

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = RegisterUserRequest

// PutUsersUuidJSONRequestBody defines body for PutUsersUuid for application/json ContentType.
type PutUsersUuidJSONRequestBody = UpdateUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /addresses/{address})
	DeleteAddressesAddress(ctx echo.Context, address string) error

	// (PUT /addresses/{address})
	PutAddressesAddress(ctx echo.Context, address string) error

	// (POST /addresses/{version})
	PostAddressesVersion(ctx echo.Context, version PostAddressesVersionParamsVersion) error

	// (GET /me)
	GetMe(ctx echo.Context) error

	// (GET /users)
	GetUsers(ctx echo.Context) error

	// (POST /users)
	PostUsers(ctx echo.Context) error

	// (DELETE /users/{uuid})
	DeleteUsersUuid(ctx echo.Context, uuid string) error

	// (GET /users/{uuid})
	GetUsersUuid(ctx echo.Context, uuid string) error

	// (PUT /users/{uuid})
	PutUsersUuid(ctx echo.Context, uuid string) error

	// (GET /users/{uuid}/addresses)
	GetUsersUuidAddresses(ctx echo.Context, uuid string) error

	// (POST /users/{uuid}/key)
	PostUsersUuidKey(ctx echo.Context, uuid string) error

	// (POST /users/{uuid}/token)
	PostUsersUuidToken(ctx echo.Context, uuid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteAddressesAddress converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAddressesAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAddressesAddress(ctx, address)
	return err
}

// PutAddressesAddress converts echo context to params.
func (w *ServerInterfaceWrapper) PutAddressesAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutAddressesAddress(ctx, address)
	return err
}

// PostAddressesVersion converts echo context to params.
func (w *ServerInterfaceWrapper) PostAddressesVersion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version" -------------
	var version PostAddressesVersionParamsVersion

	err = runtime.BindStyledParameterWithOptions("simple", "version", ctx.Param("version"), &version, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAddressesVersion(ctx, version)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersUuid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUuid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", ctx.Param("uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersUuid(ctx, uuid)
	return err
}

// GetUsersUuid converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUuid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", ctx.Param("uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUuid(ctx, uuid)
	return err
}

// PutUsersUuid converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUuid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", ctx.Param("uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersUuid(ctx, uuid)
	return err
}

// GetUsersUuidAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUuidAddresses(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", ctx.Param("uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUuidAddresses(ctx, uuid)
	return err
}

// PostUsersUuidKey converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUuidKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", ctx.Param("uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersUuidKey(ctx, uuid)
	return err
}

// PostUsersUuidToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUuidToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", ctx.Param("uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersUuidToken(ctx, uuid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/addresses/:address", wrapper.DeleteAddressesAddress)
	router.PUT(baseURL+"/addresses/:address", wrapper.PutAddressesAddress)
	router.POST(baseURL+"/addresses/:version", wrapper.PostAddressesVersion)
	router.GET(baseURL+"/me", wrapper.GetMe)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:uuid", wrapper.DeleteUsersUuid)
	router.GET(baseURL+"/users/:uuid", wrapper.GetUsersUuid)
	router.PUT(baseURL+"/users/:uuid", wrapper.PutUsersUuid)
	router.GET(baseURL+"/users/:uuid/addresses", wrapper.GetUsersUuidAddresses)
	router.POST(baseURL+"/users/:uuid/key", wrapper.PostUsersUuidKey)
	router.POST(baseURL+"/users/:uuid/token", wrapper.PostUsersUuidToken)

}
